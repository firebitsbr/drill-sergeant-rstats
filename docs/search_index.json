[
["index.html", "Using Apache Drill with R Preface 0.1 Preparing R for Drill", " Using Apache Drill with R Bob Rudis 2018-03-24 Preface Apache Drill “enables analysts, business users, data scientists and developers to explore and analyze this data without sacrificing the flexibility and agility offered by these datastores. Drill processes the data in-situ without requiring users to define schemas or transform data.”1 This book is about using Apache Drill with R and the sergeant package. Rather than produce an extensive tome, the chapters are organized into a more “cookbook”-style production with some (brief) introductory exposition. Rather than write “I” everywhere, be it known up-front that any idioms or advocation contatained within are from the mind of someone who has stared into the heart of the TARDIS yet did not perish (i.e. I’m far askew of the average/normal individual and some things that work for me may seem strange, inefficient or even crazy to others). Emphatic/declarative statements should be interpreted as “I [think|believe]” vs accepted as fact without your own personal verification. For example, I’m about to say “Drill is…” in the next paragraph and it’s all just my own delcarative take on this subject. Drill is—in a word—awesome. On its own it can help you wrangle data out of (and into) parquet2, [CT]SV, JSON, MongoDB, MySQL, PostgreSQL (OK, anything that speaks JDBC), and more. You can scale it from a zero-configuration local filesystem install to a giant cluster with diverse data endpoints. You can speak SQL to it and have it translate into all the modern, heaven-forsaken NoSQL dialects for you (i.e. it can abstract away the query syntax of all the modern databases the crazy kids today use). Drill lets you focus on a single way of thinking about data wrangling/processing so you can get to your analyses, visualizations, dasboards or reports more quickly. Drill also gives you an excuse to finally organize your data without (necessarily) creating a massive single “data lake” in the process. There are plenty of other reasons for “why Drill?”3, and you can jump into the active community4 and even poke at the sources5 to gain a better understanding of the entirety of the mission/purpose of Drill. The first few “recipes” will focus on Drill itself but the remainder of the book will be on solving specific problems or addressing specific situations with Drill &amp; sergeant. If you need an area to be addressed that is not covered, please file an issue with as clear a question as possible and a new recipe will be added to help clarify each new use-case. Also, the earlier drafts of this book will focus on Linux-ish systems (including macOS). I’ll do my best to add Windows-specific context later on, but you’d be far better off installing Ubuntu in Windows 10 (since Microsoft supports that now). 0.1 Preparing R for Drill Using Drill with R relies on RJDBC which means your system will need Java and rJava. You should spend some time on that now vs be frustrated later (if you do not currently have a working rJava environment). File an issue on this repo if having a recipe for getting Java working with R would be beneficial. (Kinder souls could also file a PR with said assistance.) The sergeant package is available on CRAN but we may work with the GitHub version of it for this book in the event some enhancements are made to support recipes. If you prefer CRAN, then you can do: install.packages(&quot;sergeant&quot;) otherwise, do: devtools::install_github(&quot;hrbrmstr/sergeant&quot;) Every effort will be made to identify recipes that may require functionality not in the CRAN stable release. This book also makes extensive use of the tidyverse meta-package, since one way to use sergeant is via the database back-end of dplyr. You will need to: install.packages(&quot;tidyverse&quot;) if you have not used packages from it before (it may take a few minutes, especially on Linux systems). Drill FAQ↩ Apache Parquet↩ Why Drill?↩ Drill Mailing Lists↩ Drill GitHub Source Mirror↩ "],
["about-the-author.html", "About the Author", " About the Author Bob Rudis is a cybersecurity researcher and R afficionado presently thwartng cyber evildoers as [Master] Chief Data Scientist at Rapid7. He was formerly a Security Data Scientist &amp; Managing Principal at Verizon, overseeing the team that produces the annual Data Breach Investigations Report. Bob is a serial tweeter (https://twitter.com/hrbrmstr), avid blogger (https://rud.is/b), author (Data-Driven Security — [http://amzn.to/2CKvrqX]), Stack Overflow contributor (https://stackoverflow.com/users/1457051/hrbrmstr), speaker, and regular contributor to the open source community (https://github.com/hrbrmstr). He is the author of several packages on CRAN including ggalt, hrbrthemes, waffle, statebins. "],
["drill-in-more-than-10-minutes.html", "Drill in More Than 10 Minutes 0.2 Beyond Standalone Mode 0.3 Installing Zookeeper 0.4 Wiring Up Zookeeper With Drill 0.5 Allocating More Memory to Apache Drill 0.6 Administering Drill 0.7 Drill “Storage” Plugins", " Drill in More Than 10 Minutes Part of the wonder of the modern internet is that one doesn’t have to reinvent or redescribe the wheel. The Apache Drill team has superb “Drill in 10 Minutes”6 tutorial which walks you through the downloading, installation and running (in “standalone” mode) of Apache Drill. Provided you already have Java installed, the time-investment estimation is fairly accurate. You should go through that tutorial before proceeding and only continue here when Drill works. File an book issue if you believe more expository would help with that tutorial or if there were “gotchas” you had to overcoome. 0.2 Beyond Standalone Mode The “10 Minutes” tutorial puts Drill in standalone mode and gets you up and running. The sergeant package will work with Drill in standalone mode, but said mode requires you to keep a Drill “shell” running. That is sub-optimal and can lead to frustration. Thankfully, it’s not too difficult to put drill into single-node server mode, but it does require a bit of work and one additional component: Apache Zookeeper7. Zookeeper’s mission in life it to be a highly available/distributed configuration manager for distributed services and when Drill is used in a &gt;=1 configuration, Zookeeper is necessary to share configuration information between nodes. Thankfully, it’s easy to setup Zookeeper in a single-node with Drill. 0.3 Installing Zookeeper First, we need to install Zookeeper: 0.3.1 macOS Using Homebrew8: brew install zookeeper ln -sfv /usr/local/opt/zookeeper/homebrew.mxcl.zookeeper.plist ~/Library/LaunchAgents 0.3.2 Ubuntu/Debian-ish sudo apt-get install zookeeperd service zookeeper # {start|stop|status|restart|force-reload} 0.3.3 Windows TBD 0.4 Wiring Up Zookeeper With Drill On Linux and macOS, it’s best to have drill in /usr/local/drill (it’s handy to symlink the full versioned directory to drill to make it easier to switch out/upgrade versions). On Windows, Drill is in TBD. The Drill directory structure looks like: . ├── bin ├── conf ├── jars │   ├── 3rdparty │   │   ├── fedora │   │   ├── linux │   │   ├── osx │   │   └── windows │   ├── classb │   ├── ext │   ├── jdbc-driver │   └── tools ├── sample-data │   ├── nationsMF │   ├── nationsSF │   ├── regionsMF │   └── regionsSF └── winutils └── bin And, you’ll need to edit conf/drill-override.conf to look a bit like this: drill.exec: { cluster-id: &quot;COOL_CLUSTER_ID_NAME&quot;, # keep it short zk.connect: &quot;localhost:2181&quot;, # use zookeeper store.json.reader.skip_invalid_records: true, # handle bad json more gracefully sys.store.provider.local.path: &quot;/usr/local/drill/conf/storage.conf&quot; # persist storage provider config changes } Once you do that, you can then use: drillbit.sh start to keep Drill running without having to persist a shell. To test this configuration, just do: drill-conf and you should get into a Drill sqline shell the same as if you had been using standalone mode. The cool part of this is that you can now extend your node into a cluster with just a few configuration changes. 0.5 Allocating More Memory to Apache Drill The author is a huge proponent of letting Drill do the data wrangling and giving it memory to do the work it needs to do for said wrangling vs R (or Python). For larger systems (16+DB RAM) you’ll likely want/need to update the default memory settings. To keep the book as DRY9 as possible, you can check out the “Configuring Drill Memory”10 section of the online Drill manual since it does a fine job explaining the configuration parameters you’ll need to change. Drill is somewhat like R in that memory (RAM) will constrain what you can do. We’ll discuss this more in future recipes. 0.6 Administering Drill The remainder of the book will assume Drill is running as a server. If you keep it in standalone mode, you will need to have it running manually for most of the book content to be relevant. You’ll want to bookmark/tab: http://localhost:8047/ http://localhost:8047/query http://localhost:8047/storage http://localhost:8047/profiles in your favourite web browser since it is likely you’ll visit those admin pages more than you think you will. Starting with Drill 1.13.0 the query interface is syntax highlighted and a serious bug in the query results display has been fixed, so it’s a pretty decent interface for testing out queries. 0.7 Drill “Storage” Plugins Drill works with databases, Hadoop-filesystems, Amazon S3 storage and plain ’ol local filesystems/directories that you use every day. We’ll focus mainly on these simple local filesystems throughout the book since it is somewhat beyond the scope to introduce readers to Hadoop/Hive/HBase, but we’ll likely delve into database access and even S3 access along the way. You should Read The Fine Manual11 to get an idea of how to work with the storage configuration since we’ll be tweaking it along the way throughout the book. Drill in 10 Minutes↩ Apache Zookeeper↩ Homebrew↩ Don’t Repeat Yourself↩ Configuring Drill Memory↩ Drill Storage Plugin Configuration↩ "],
["wiring-up-drill-and-r-dplyr-style.html", "Recipe 1 Wiring Up Drill and R (dplyr-style) 1.1 Problem 1.2 Solution 1.3 Discussion 1.4 See Also", " Recipe 1 Wiring Up Drill and R (dplyr-style) 1.1 Problem You have Drill installed and want to work with Drill from R using dplyr idioms. 1.2 Solution Install, load and use the sergeant package. 1.3 Discussion Working with Drill in a dplyr context is pretty straightforward. Assuming you have drill running you need to: connect to the database identify a table perform normal operations The Drill query interface (http://localhost:8047/query) provides an example query we can use for testing if your setup is working: SELECT * FROM cp.`employee.json` LIMIT 20 Let’s take a look at the employee.json table using R &amp; dplyr. library(sergeant) library(tidyverse) db &lt;- src_drill(&quot;localhost&quot;) db ## src: DrillConnection ## tbls: cp.default, dfs.caps, dfs.d, dfs.default, dfs.root, dfs.tmp, ## INFORMATION_SCHEMA, sys employee &lt;- tbl(db, &quot;cp.`employee.json`&quot;) employee ## # Source: table&lt;cp.`employee.json`&gt; [?? x 16] ## # Database: DrillConnection ## store_id gender department_id birth_date supervisor_id last_name ## &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;date&gt; &lt;int&gt; &lt;chr&gt; ## 1 0 F 1 1961-08-26 0 Nowmer ## 2 0 M 1 1915-07-03 1 Whelply ## 3 0 M 1 1969-06-20 1 Spence ## 4 0 F 1 1951-05-10 1 Gutierrez ## 5 0 F 2 1942-10-08 1 Damstra ## 6 0 F 3 1949-03-27 1 Kanagaki ## 7 9 F 11 1922-08-10 5 Brunner ## 8 21 F 11 1979-06-23 5 Blumberg ## 9 0 M 5 1949-08-26 1 Stanz ## 10 1 M 11 1967-06-20 5 Murraiin ## # ... with more rows, and 10 more variables: position_title &lt;chr&gt;, ## # hire_date &lt;dttm&gt;, management_role &lt;chr&gt;, salary &lt;dbl&gt;, ## # marital_status &lt;chr&gt;, full_name &lt;chr&gt;, employee_id &lt;int&gt;, ## # education_level &lt;chr&gt;, first_name &lt;chr&gt;, position_id &lt;int&gt; If you’ve never worked with the dplyr and databases before, you may not be aware that what’s really happening is different than what you experince with local R data frames. The call to src_drill(&quot;localhost&quot;) does some RJDBC/DBI “magic” behind the scenes to setup all the necessary connection parameters. By printing db, a SQL query —SHOW DATABASES—is issued to get available storage/databases and reformats it to conform to the expected dplyr datbase API. When tbl(...) is executed a SELECT * FROM cp.`employee.json` LIMIT 1 is issued to obtain field information for future operations on employee. Finally, when employee is printed, the query SELECT * FROM cp.`employee.json` LIMIT 10 is issued and the contents transferred back into R. sergeant cheats a bit since the data is run through readr::type_convert() before being delivered back to the user. It does this for a whole host of reasons, but mostly out of convenience for the user. 1.4 See Also Drill package source README "],
["wiring-up-drill-and-r-rjdbc-style.html", "Recipe 2 Wiring Up Drill and R (RJDBC-style) 2.1 Problem 2.2 Solution 2.3 Discussion 2.4 See Also", " Recipe 2 Wiring Up Drill and R (RJDBC-style) 2.1 Problem You have Drill installed and want to work with Drill from R using RJDBC idioms. 2.2 Solution Install, load and use the sergeant package. 2.3 Discussion Working with Drill in a RJDBC context is pretty straightforward. Assuming you have drill running you need to: connect to the database issue a query The Drill query interface (http://localhost:8047/query) provides an example query we can use for testing if your setup is working: SELECT * FROM cp.`employee.json` LIMIT 20 Let’s take a look at the employee.json table using R &amp; RJDBC. library(sergeant) con &lt;- drill_jdbc(&quot;localhost&quot;) con ## &lt;JDBCConnection&gt; res &lt;- dbGetQuery(con, &quot;SELECT * FROM cp.`employee.json` LIMIT 20&quot;) str(res) ## &#39;data.frame&#39;: 20 obs. of 16 variables: ## $ employee_id : num 1 2 4 5 6 7 8 9 10 11 ... ## $ full_name : chr &quot;Sheri Nowmer&quot; &quot;Derrick Whelply&quot; &quot;Michael Spence&quot; &quot;Maya Gutierrez&quot; ... ## $ first_name : chr &quot;Sheri&quot; &quot;Derrick&quot; &quot;Michael&quot; &quot;Maya&quot; ... ## $ last_name : chr &quot;Nowmer&quot; &quot;Whelply&quot; &quot;Spence&quot; &quot;Gutierrez&quot; ... ## $ position_id : num 1 2 2 2 3 4 11 11 5 11 ... ## $ position_title : chr &quot;President&quot; &quot;VP Country Manager&quot; &quot;VP Country Manager&quot; &quot;VP Country Manager&quot; ... ## $ store_id : num 0 0 0 0 0 0 9 21 0 1 ... ## $ department_id : num 1 1 1 1 2 3 11 11 5 11 ... ## $ birth_date : chr &quot;1961-08-26&quot; &quot;1915-07-03&quot; &quot;1969-06-20&quot; &quot;1951-05-10&quot; ... ## $ hire_date : chr &quot;1994-12-01 00:00:00.0&quot; &quot;1994-12-01 00:00:00.0&quot; &quot;1998-01-01 00:00:00.0&quot; &quot;1998-01-01 00:00:00.0&quot; ... ## $ salary : num 80000 40000 40000 35000 25000 15000 10000 17000 50000 15000 ... ## $ supervisor_id : num 0 1 1 1 1 1 5 5 1 5 ... ## $ education_level: chr &quot;Graduate Degree&quot; &quot;Graduate Degree&quot; &quot;Graduate Degree&quot; &quot;Bachelors Degree&quot; ... ## $ marital_status : chr &quot;S&quot; &quot;M&quot; &quot;S&quot; &quot;M&quot; ... ## $ gender : chr &quot;F&quot; &quot;M&quot; &quot;M&quot; &quot;F&quot; ... ## $ management_role: chr &quot;Senior Management&quot; &quot;Senior Management&quot; &quot;Senior Management&quot; &quot;Senior Management&quot; ... The R manual page for drill_jdbc() informs you that you need to have DRILL_JDBC_JAR setup in your environment and for Drill 1.13.0 on a Linux-ish system that should become an entry in your ~/.Renviron file as so: DRILL_JDBC_JAR=/usr/local/drill/jars/jdbc-driver/drill-jdbc-all-1.13.0.jar On Windows that will be TBD. Odds are that if you’re in this section of the book you’re familiar with RJDBC operations. You’ll also be disappointed that most of the RJDBC interface has not been fully implemented since there have been virtually no requests for it. File an issue if you would like more than just the ability to perform queries. NOTE: You’re really better off using drill_connection() and drill_query() vs go through the RJDBC machinations since you get the same thing without the overhead of Java. 2.4 See Also Drill package source README "]
]
